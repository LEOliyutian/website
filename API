8 Embed & API - 1 Sharing and embedding (API)

<style type="text/css">
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
table {
  max-width:600px;
}
.article table pre {
  font-size: 8pt;
}
</style>

<p>thecrag.com Application Programming Interface (API) enables sharing of rock climbing information in a programmatic way. For example you will be able to use this API to build your own applications, or present rock climbing information on your website.</p>

<p>The API is in Beta release, which means that it is subject to change. We will be using a couple of trial applications to help us stablise the specification, including the website itself and an Android mobile app. If you want to be one of the brave developers to work with Beta API release then <a href="/article/contactus">contact us</a>.</p>

<p>An application may use the API to:</p>

<ul>
  <li>access read-only crag information;</li>
  <li>update crag information;</li>
  <li>access to read-only public account information;</li>
  <li>access read-only private account information; or</li>
  <li>update account information.</li>
</ul>

<p>We are also developing a javascript wrapper framework for the API so you can easily integrate server data into your javascript code. See <a href="https://github.com/theCrag/thecrag-javascript">https://github.com/theCrag/thecrag-javascript</a> for the pre-release version (probably too early to start using it, but worth while knowing it is there if you are planning to write an app).</p>


<p>This document covers the following topics:<p>

<ol>
  <li><a href="#s1">Projects</a></li>
  <li><a href="#s2">Access</a></li>
  <li><a href="#s3">Application key</a></li>
  <li><a href="#s4">Protected resources</a></li>
  <li><a href="#s5">Read access points</a></li>
  <li><a href="#s6">Optimising down the wire</a></li>
  <li><a href="#s7">Update access points</a></li>
  <li><a href="#s8">Mobile app endpoints</a></li>
</ol>


<h1 id="s1">1. Projects</h1>

<p>The current API projects are underway:</p>

<ul>
  <li>Several mobile app for Android and iPhone; </li>
  <li>New routes for club website; </li>
  <li>Climbing geo links for outdoor sites; </li>
  <li>Wordpress template for single crag; and</li>
  <li>thecrag.com website.</li>
</ul>




<h1 id="s2">2. Access</h1>

<p>Access to the API is broadly in-line with our <a href="/processmap/copyright">copyright</a> (Creative Commons - Attribution Non-Commercial Share Alike), but must be negotiated with us. Generally speaking granting we are looking to find API develors where the development benefits theCrag as well as the developer. For example this may be more users, content, or revenue share. Here are some examples of the kind of things that we would be interested in:</p>

<p><b>Scenario A</b>: You give us content for an area, we'll give yiou API access for that area - eg a local club or a local guidebook getting 'merged into the borg'.</p>

<p><b>Scenario B</b>: You give us tick data data, we host logbook and leverage stats, probably free, but maybe commecial if high traffic.</p>

<p><b>Scenario C</b>: You give us money, revenue share, we give you content. You add value essentially in a better UX for a platform (iPhone, Andriod, XBox, etc).</p>

<p><b>Scenario D</b>: You give us money we give you exposure to user base (eg sponsored links, sponsored articles).</p>

<p><b>Scenario E</b>: You give us new users, we give you new users (for example cross linking with MTB site or skiing site).</p>

<p><b>Scenario F</b>: You make a donation, we give you access to the API for non-commecial projects.</p>

<p><b>Scenario H</b>: University projects.</p>

<p>When considering any proposals to us please note that we are interested in a long term mutually beneficial relationship. We are not interested in providing free content so you can kick start a competitive business.</p>

<p>Conditions of use of API:</p>

<ol>

<li>You must have an API Key. We only grant API Keys to people who are monthly <a href="/donate">financial supporters</a> of the site (eg $5/month). Once you end your financial subscription then we may close your API key.</li>

<li>Unless otherwise negotiated with us you may only use your api-key for non-commecial purposes.</li>

<li>You must use the dev api (dev.thecrag.com) for for application testing and development purposes and get your application approved by us before being released in production.</li>

<li>You must use the api calls as advised for your application. For example if an application is inefficiently using the API calls and we identify a better way of doing so then you must change to the recommended calls. In many instances we may actually develop an API call tailored for your application. This protects thecrag from applications making hundreds of calls to get information that could be made in one call.</li>

<li>All instances of your application must have a reasonable combined peak load usage. Reasonable is defined as not adversely effecting the overall performance of the server. As a guideline with a single server (our current configuration), reasonable peak load is less than 10 calls in a 10 second period but may vary depending on what API calls are made. (Note that this load is accoss all instances of your app). As we scale the system we intend to be more flexible with the definition of reasonable load.</li>

<li>You must disclose whether your app is commecial or not or whether you intend to make it commecial. Commercial includes user pays, advertising and promotional applications. For example if there is advertising associated with the application then we would consider this commercial. Also if you are building the application as a promotional app (eg for Black Diamond or for a gym) then this would also be seen as commercial. Please ask us about whether or not we would view your application as commercial. If you want a commercial app then we are not greedy it's just a matter of negotiating fair compensation. It's only fair that thecrag.com does not bear other peoples commercial costs without being compensated (yes it does cost money for us to have an API available). We will usually negiotiate on a 50-50 revenue share basis.</li>

<li>You must not use the api to build your own content from that supplied by the api. Please discuss with us any caching or storing of content on your client side, because in some instances caching or storing of content is acceptable. Unless otherwise negotiated you should assume that storing or caching of content is not acceptable.  This ensures that the final end user gets up-to-date information and also protects thecrag from bad will usage (eg using thecrag api to build lists of climbs for your own server). Typically this mean you can cache on a mobile client but not on a server.</li>

<li>You must adhear to all copyright restrictions of the data you are accessing though the api. For avoidance of doubt, access to information through the API does not give you any additional rights to copyright material. Information from third parties may be passed through the api, in which case they will have their own copyright tag. If data is not tagged with a copyright then you can assume it falls under <a href="/processmap/copyright">thecrag.com copyright</a>.</li>

<li>There is no quality of service or continuity of service guarantee.</li>

<li>The api is in early beta stage so you should only use it if you are able to deal with the frustrations of a beta product. We are willing and eager to make changes to supporter client applications efficiently, however we cannot commit to any timelines. </li>

<li>You must document the specific use of all your api end-points for us to review before going into production.</li>

</ol>

<p>For commecial initiatives we may implement Quality of Service guarentees and provide priority access depending on how things pan out.</p>


<h2>2.1 How do I get API access?</h2>

<p>In order to get access to the API you must:</p>

<ul>
  <li><a href="/article/contactus">Contact us</a></li>
  <li>Get us to allocate an API key</li>
  <li>Trial application on the development server (dev.thecrag.com)</li>
</ul>


<h2>2.2 Copyright constraints</h2>

<p>Please note that API implementations are bound by the copyright restrictions of thecrag.com or the contributing publisher. Thecrag.com's copyright requires attribution under the <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons - Attribution Non-Commercial Share Alike</a> licence. As a guide, for areas where contributions have come from lots of users we allow you to attribute the highest <a href="/article/CragKarma">Karma</a> contributors and reference how to get the original information from thecrag.com. Specific information like photos, or grade contributions should reference the particular user. Please note that we reserve the right to ask you to make additional attributions in your application (it's only fair that climbers spending their time and effort for the benefit of the whole climbing community get properly attributed).</p>


<p>Where the API is providing information under a third party publisher then you are bound by their copyright not thecrag.com's copyright. This information will be tagged with a copyright ID. You may retieve details of the publishers copyright through a separate copyright api call.</p>

<p>You must check for publisher tagged copyright for the following entities:</p>

<ul>
  <li>Area descriptions</li>
  <li>Route descriptions</li>
  <li>Photos</li>
  <li>Topos</li>
</ul>



<h1 id="s3">3. Application key</h1>

<p>All access to the API must use an API key. The API key may be supplied as a URL parameter ‘key=abc’ or though a custom HTTP header item ‘X-CData-Key: key=abc;’.</p>

<p><strong>Developer style note</strong>: you should provide a global variable for setting the application key, and standardise the way you access the API. This will minimise the headaches if you have to change API keys for some reason.</p>

<h2>3.1 As URL parameter</h2>

<p>If the api key is supplied as a URL parameter the API call would look something like:</p>

<pre class="code">
  www.thecrag.com/api/area/id/1234?key=abc
</pre>


<h2>3.2 As HTTP header</h2>

<p>If the api key is supplied as a HTTP header then the http GET call would look something like:</p>

<pre class="code">
  GET www.thecrag.com/api/area/id/1234 HTTP/1.1
  X-CData-Key: key=abc;
</pre>





<h1 id="s4">4. Protected resources</h1>

<p>An application may get access to protected resources (ie private account data) using <a href="http://tools.ietf.org/html/rfc5849">OAuth</a> protocol. OAuth is an Internet standard protocol and is fairly well supported in popular development software. You will need to use OAuth for:</p>

<ul>
  <li>Access to private account data; and</li>
  <li>Updating account data including logging ticks.</li>
</ul>

<p>thecrag.com’s OAuth implementation uses the following end points in the production system:</p>

<ul>
  <li><strong>Temporary Credentials</strong>: http://www.thecrag.com/oauth/request_token</li>
  <li><strong>User Authorization</strong>: http://www.thecrag.com/oauth/authorize</li>
  <li><strong>Access Token</strong>: http://www.thecrag.com/oauth/access_token</li>
</ul>

<p>In the development system use the following similar end points:</p>

<ul>
  <li><strong>Temporary Credentials</strong>: http://dev.thecrag.com/oauth/request_token</li>
  <li><strong>User Authorization</strong>: http://dev.thecrag.com/oauth/authorize</li>
  <li><strong>Access Token</strong>: http://dev.thecrag.com/oauth/access_token</li>
</ul>

<p><strong>Developer style note</strong>: As you will have to test the application in the development system you should create a global variable for the server and set it to either 'http://www.thecrag.com' or 'http://dev.thecrag.com'. This will eliminate the painful problems of only half cutting over from the development to production server. Please note also that we do intend to cut over to https in the near term.</p>

<p>For all OAuth end points use HMAC-SHA1 as the oauth_signature_method. The <a href="http://tools.ietf.org/html/rfc5849">OAuth</a> spec has a nice explicit example of the information flow for Auth. The following discussion should be read in conjuction with the spec example to show how OAuth works on thecrag.com.</p>


<h2>4.1 Temporary Credentials</h2>

<p>When you apply for an API access key you will be given the Application key and secret. Use these as the consumer_key and consumer_secret for getting temporary token.</p>

<pre class="code">
  http://www.thecrag.com/oauth/request_token
  (note that Authorization fields must be included in the HTTP header request)
</pre>

<p>Temporary credentials request requires the following OAuth fields in the Authorization header:</p>

<ul>
  <li>oauth_consumer_key</li>
  <li>oauth_signature_method</li>
  <li>oauth_timestamp</li>
  <li>oauth_nonce</li>
  <li>oauth_callback</li>
  <li>oauth_signature</li>
</ul>

<p>A temporary oauth_token and oauth_secret will be returned if the signature is verified.</p>

<pre class="code">
  HTTP/1.1 200 OK
  Content-Type: application/x-www-form-urlencoded

  oauth_token=ijk&oauth_token_secret=qrs&oauth_callback_confirmed=true
</pre>


<h2>4.2 User Authorization</h2>

<p>After you are given temporary credentials the client application must redirect to thecrag.com’s authorization URL using the oauth_token (returned by the Temporary Credentials step above) as a URL parameter. You may also supply the user login if this is already known. For example:</p>

<pre class="code">
  http://www.thecrag.com/oauth/authorize?oauth_token=abc&login=XYZ
</pre>

<p>Don’t worry if the login is not known then the user will be prompted for their login. Also note that if the user is already logged into thecrag via cookie sessions then this will be used to identify the default user for authorizing access.</p>

<p>The user will be prompted for an account login name and a password. If the login and password are successfully verified by thecrag.com server then the client will be redirected to the oauth_callback (supplied in the Temporary Credentials step) using with URL parameters oauth_token, oauth_verifier and accountID.</p>

<pre class="code">
  oauth_callback_url?oauth_token=abc&oauth_verifier=efg&accountID=1234
</pre>

<p>Please note the use of oauth_verifier, as this is a more recent change to the OAuth protocol. Please be aware that some of OAuth implementations may not include this.</p>


<h2>4.3 Access Token</h2>

<p>After the user has authorized access then the client API can get an access token for ongoing access to the account data.</p>

<pre class="code">
  http://www.thecrag.com/oauth/access_token
  (note that Authorization fields must be included in the HTTP header request)
</pre>

<p>Access Token request request requires the following OAuth fields in the Authorization header:</p>

<ul>
  <li>oauth_consumer_key</li>
  <li>oauth_token</li>
  <li>oauth_signature_method</li>
  <li>oauth_timestamp</li>
  <li>oauth_nonce</li>
  <li>oauth_verifier</li>
  <li>oauth_signature</li>
</ul>

<p>A full oauth_token and oauth_secret will be returned if the signature is verified.</p>

<pre class="code">
  HTTP/1.1 200 OK
  Content-Type: application/x-www-form-urlencoded

  oauth_token=tuv&oauth_token_secret=wxy&oauth_callback_confirmed=true&account_id=1234
</pre>


<h2>4.4 Protected Resource Access</h2>

<p>Once a client app has the full access token the client will be able to access the protected resource (ie private account data associated with the account) by using the token in the Authorization header. For example</p>

<pre class="code">
  http://www.thecrag.com/api/account/id/1234
  (with the Authorization item included in the header)
</pre>

<p>OAuth fields for access to a protected resource:</p>

<ul>
  <li>oauth_consumer_key</li>
  <li>oauth_token</li>
  <li>oauth_signature_method</li>
  <li>oauth_timestamp</li>
  <li>oauth_nonce</li>
  <li>oauth_signature</li>
</ul>

<p><strong>Note</strong> that generating the signature uses the uri of the protected resource. This must be the 'http://www.thecrag.com/api/some/endpoint' (or https) without any url parameters.</p>



<h1 id="s5">5. Read access points</h1>

<p>The API top level access point is:</p>

<pre class="code">
  http://www.thecrag.com/api
</pre>

<p>There are some secondary access points you may be able to use if you need web page style access. These secondary access points are not documented but replicate the data used by the website templates (note that these are not to be generally used by client apps without special permissions, and hence remain undocumented).</p>

<p>Full definitions of the API access points may be found here:</p>

<p class="info_box">
 <img src="/static/silk/cog.png" width="16" height="16" alt="" />
<a href="/api-wadl.xml">thecrag API endpoint reference</a></p>

<p>Unless otherwise stated all API read access points return utf8 encoded text.</p>

<p>The API returns JSON data (mime type of application/json). If you are using Firefox then you may find a plugin which displays this nicely.</p>

<p>If you wish to return JSONP for a javascript function you use the URL paramater jsonp=myFunction. If JSONP is used then the API will return MIME type text/javascript. For example:</p>
<pre class="code">
  http://www.thecrag.com/api/area/id/1234?jsonp=processArea
</pre>
<p>Some of the read api functions return JSON data which contains <a href="http://www.thecrag.com/article/UpdatingDescriptions#section3">thecrag flavored markdown</a>. Normally for the website this markdown text is automatically marked up to HTML for website display, however with the API you may sometimes want it marked up as text or as html. For thecrag flavored markdown to be marked up as text use the URL parameter markupType=text, otherwise use markupType=html. Please note that the default is 'none' (ie the API does not do any conversion of markdown text and leaves that up to the client.<p>

<p>For example if you wanted to convert area beta markdown into HTML you would use:</p>

<pre class="code">
  http://www.thecrag.com/api/area/id/1234/beta?markupType=html
</pre>

<p>The following sections outline some examples of api read calls.</p>

<p>If general error was encountered with the API call then JSON data is returned indicating what the error was, for example:</p>

<pre class="code">
  {
    error: "bad uri",
  }
</pre>


<h2>5.1 System Configuration</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/config/grade/context?key=abc">http://dev.thecrag.com/api/config/grade/context</a></li>
  <li><a href="http://dev.thecrag.com/api/config/grade/type?key=abc">http://dev.thecrag.com/api/config/grade/type</a></li>
  <li><a href="http://dev.thecrag.com/api/config/grade/system?key=abc">http://dev.thecrag.com/api/config/grade/system</a></li>
  <li><a href="http://dev.thecrag.com/api/config/ascent/ticktypes?key=abc">http://dev.thecrag.com/api/config/ascent/ticktypes</a></li>
  <li><a href="http://dev.thecrag.com/api/config/ascent/relativedifficulty?key=abc">http://dev.thecrag.com/api/config/ascent/relativedifficulty</a></li>
  <li><a href="http://dev.thecrag.com/api/config/ascent/quality?key=abc">http://dev.thecrag.com/api/config/ascent/quality</a></li>
</ul>

<p>Grade context configuration is essentially used to resolve conflicts when parsing grades into potentially conflicting grades from grading systems around the world.</p>

<p>Grade type configuration aggregates the grading systems to like types.</p>

<p>Grade system configuration defines the grading systems used by thecrag. It includes variables for parsing, displaying and converting to an internal score (0-500).</p>


<h2>5.2 Country</h2>

<p>Note that you must also use an application if you were to implement any of the examples in this section or following sections. These examples use a application key associated with the API demo. You are not permitted to use this API key in your application. The demo API key will be changed from time to time, so your application will just stop working if you are using the demo API key.</p>

<ul>
  <li><a href="http://dev.thecrag.com/api/country/list?key=abc">http://dev.thecrag.com/api/country/list</a></li>
  <li><a href="http://dev.thecrag.com/api/country/id/7478254?key=abc">http://dev.thecrag.com/api/country/id/7478254</a></li>
</ul>


<h2>5.3 Climber</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185?key=abc">http://dev.thecrag.com/api/climber/id/9068185</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/shortcuts?key=abc">http://dev.thecrag.com/api/climber/id/9068185/shortcuts</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/linkedto?key=abc">http://dev.thecrag.com/api/climber/id/9068185/linkedto</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/linkedfrom?key=abc">http://dev.thecrag.com/api/climber/id/9068185/linkedfrom</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/photo?key=abc">http://dev.thecrag.com/api/climber/id/9068185/photo</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/ascents?key=abc">http://dev.thecrag.com/api/climber/id/9068185/ascents</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/ascents/onsight?key=abc">http://dev.thecrag.com/api/climber/id/9068185/ascents/onsight</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/trips?key=abc">http://dev.thecrag.com/api/climber/id/9068185/trips</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/ids?id=9068185,11183449&key=abc">http://dev.thecrag.com/api/climber/ids?id=9068185,11183449</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/search?search=simon&key=abc">http://dev.thecrag.com/api/climber/search?search=simon</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/subscriptions/156291588?key=abc">http://dev.thecrag.com/api/climber/id/9068185/subscriptions/156291588</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/subscriptions/thecrag?key=abc&days-since-expired=31">http://dev.thecrag.com/api/climber/id/9068185/subscriptions/thecrag?days-since-expired=31</a></li>
</ul>

<p>If an account is public then you may access their data, however if an account is private then you need to use OAuth to access the data.</p>

<p>You may substiture the alias 'user' or 'account' for the word 'climber' in the climber end points.</p>

<p>Please note that the 'days-since-expired' field for subscriptions is optional. If it is specified then the recently expired subscriptions are included as well as valid subscriptions in the return data.</p>


<h2>5.4 Node (Area/Route)</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/node/id/11737699?key=abc">http://dev.thecrag.com/api/node/id/11737699</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699?show=info&show=ancestors&show=children&show=topo&show=karma&show=location&key=abc">http://dev.thecrag.com/api/area/id/11737699?show=info&show=ancestors&show=children&show=topo&show=karma&show=location</a></li>
  <li><a href="http://dev.thecrag.com/api/area/ids?id=11743723,11743795&show=routeswithhistorysince,karma&since=1998&key=abc">http://dev.thecrag.com/api/area/ids?id=11743723,11743795&show=routeswithhistorysince,karma&since=1998&key=abc</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/children?key=abc">http://dev.thecrag.com/api/area/id/11737699/children</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/children/area?key=abc">http://dev.thecrag.com/api/area/id/11737699/children/area</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/photos?key=abc">http://dev.thecrag.com/api/area/id/11737699/photos</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/publications?key=abc">http://dev.thecrag.com/api/area/id/11737699/publications</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/publications/direct?key=abc">http://dev.thecrag.com/api/area/id/11737699/publications/direct</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/directory?key=abc">http://dev.thecrag.com/api/area/id/11737699/directory</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/sponsor?key=abc">http://dev.thecrag.com/api/area/id/11737699/sponsor</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/karma?key=abc">http://dev.thecrag.com/api/area/id/11737699/karma</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/iconcrags?key=abc">http://dev.thecrag.com/api/area/id/11737699/iconcrags</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/popularareas?key=abc">http://dev.thecrag.com/api/area/id/11737699/popularareas</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/beta?key=abc">http://dev.thecrag.com/api/area/id/11737699/beta</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11737699/search?search=bard&key=abc">http://dev.thecrag.com/api/area/id/11737699/search?search=bard</a></li>
  <li><a href="http://dev.thecrag.com/api/area/id/11764759/topos?key=abc">http://dev.thecrag.com/api/area/id/11764759/topos</a></li>
  <li><a href="http://dev.thecrag.com/api/route/id/11967355?key=abc">http://dev.thecrag.com/api/route/id/11967355</a></li>
  <li><a href="http://dev.thecrag.com/api/route/id/11967355/ascents?key=abc">http://dev.thecrag.com/api/route/id/11967355/ascents</a> (this one is under review as it is expensive, so don't use it for now)</li>
  <li><a href="http://dev.thecrag.com/api/route/id/11967355/ascents/account/9068185?key=abc">http://dev.thecrag.com/api/route/id/11967355/ascents/account/9068185</a></li>
  <li><a href="http://dev.thecrag.com/api/route/id/11967355/ancestors?key=abc">http://dev.thecrag.com/api/route/id/11967355/ancestors</a></li>
  <li><a href="http://dev.thecrag.com/api/route/id/11967355/beta?key=abc">http://dev.thecrag.com/api/route/id/11967355/beta</a></li>
  <li><a href="http://dev.thecrag.com/api/route/id/11967355/beta?markupType=html&key=abc">http://dev.thecrag.com/api/route/id/11967355/beta?markupType=html</a></li>
</ul>

<p>Note that you may use ‘node’ instead of ‘area’ or ‘route’. This may be useful if you don’t know if the node is an area or a route.</p>

<p><strong>Developer style note</strong>: You should always get only what you need in as few API calls as you need (ie use show URL parameter).</p>


<h2>5.5 Ascent</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/ascent/id/24831619?key=abc">http://dev.thecrag.com/api/ascent/id/24831619</a></li>
  <li><a href="http://dev.thecrag.com/api/ascent/ids?id=24831619,23810479&key=abc">http://dev.thecrag.com/api/ascent/ids?id=24831619,23810479</a></li>
</ul>

<p><strong>Developer style note</strong>: You should always consider server load when retrieving information via the API. The API has been developed for flexibility so that you can make more efficient calls. For example if you need information about alot of ascents then you should use the multiple ids method of getting ascent information.</p>


<h2>5.6 Trip</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/trip/id/22549159?key=abc">http://dev.thecrag.com/api/trip/id/22549159</a></li>
</ul>


<h2>5.7 Photo</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/photo/id/25464718?key=abc">http://dev.thecrag.com/api/photo/id/25464718</a></li>
</ul>


<h2>5.8 Copyright</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/copyright/id/26096082?key=abc">http://dev.thecrag.com/api/copyright/id/26096082</a></li>
</ul>


<h2>5.9 Maps</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/map/summary?key=abc">http://dev.thecrag.com/api/map/summary</a></li>
  <li><a href="http://dev.thecrag.com/api/map/summary/11740915?key=abc">http://dev.thecrag.com/api/map/summary/11740915</a></li>
  <li><a href="http://dev.thecrag.com/api/map/summary/ids?id=26194194,11740915&key=abc">http://dev.thecrag.com/api/map/summary/ids?id=26194194,11740915</a></li>
  <li><a href="http://dev.thecrag.com/api/map/bbox?s=141.822,-36.7501,141.823,-36.7501&key=abc">http://dev.thecrag.com/api/map/bbox?s=141.822,-36.7501,141.823,-36.7501</a></li>
</ul>

<p>The first three elements in the above map summary lists are:</p>
<ul>
  <li>NodeID</li>
  <li>Long, without decimal place (x1000000)</li>
  <li>Lat, without decimal place (x1000000)</li>
</ul>

<p>In the crag summary lists the next two fields are optional:</p>
<ul>
  <li>Number routes not located (if not present then this is a leaf node of the heirachy, area with no children or route)</li>
  <li>Relative depth of node from query node (the order of the list means you can use this to determine the heirachy structure).</li>
</ul>

The bbox returns the node(s) that fully contain the bounded box.


<h2>5.10 Interface</h2>

<p>The following are experimental features to support logging in using Facebook or other third party social networking sites.</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/interface/facebook_dev/100000409624709?key=abc">http://dev.thecrag.com/api/interface/facebook_dev/100000409624709</a></li>
</ul>



<h2>5.11 Discussions</h2>

<p>Crag Chat discussions may be private between members or public associated with an area or route or just a general discussion. A discussion may also be linked to an ascent or a trip.</p>

<p>To access a discussion you need to know the id of the root message. Accessing a discussion is done:</p> 

<ul>
  <li><a href="http://dev.thecrag.com/api/discussion/191714736?key=abc">http://dev.thecrag.com/api/discussion/191714736</a></li>
  <li><a href="http://dev.thecrag.com/api/discussion/191714736?page=2&key=abc">http://dev.thecrag.com/api/discussion/191714736?page=2</a></li>
  <li><a href="http://dev.thecrag.com/api/discussion/191714736/last?key=abc">http://dev.thecrag.com/api/discussion/191714736/last</a></li>
</ul>

<p>A discussion can have one or more messages associated with it. If there are more then 50 messages then the discussion is paginated (use the 'page' parameter as above). To find out if another message has been added to the discussion then use the 'last' api end point. If you use the 'last' end point please use some sort of algorithm which progressively polls at larger and larger intervals, otherwise the system will be become clogged up with polling that is essentially returning the same thing.</p>

<p>Note that the 'page' parameter does not work in the example above, it is there for syntatic purposes. At some point the example will be swapped over to something that works.</p>


<h3>Private discussions</h3>

<p>In order to access private discussions you must authenticate using OAuth and be one of the accounts associated with the discussion.</p>

<p>Further API work required to get the list of private discussions.</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/discussions/involved?key=abc">http://dev.thecrag.com/api/climber/id/9068185/discussions/involved</a></li>
  <li><a href="http://dev.thecrag.com/api/climber/id/9068185/discussions/subscribed?key=abc">http://dev.thecrag.com/api/climber/id/9068185/discussions/subscribed</a></li>
</ul>

<p>You may provide the following URL arguments:</p>
<ul>
  <li><strong>unreadOnly</strong>: if set to 1 will return only unread messages.</li>
  <li><strong>page</strong>: set the page number for traversing multiple pages of discussions (default 1).</li>
  <li><strong>perPage</strong>: set the number of discussions per page (default 10).</li>
</ul>

<p>In addition the subscribed discussions has the following URL arguments:</p>
<ul>
  <li><strong>recentDays</strong>: sets the number of days from now to base the start date of the query (default 14).</li>
</ul>

<p>The subscribed discussions cover all general and area forums you are subscribed to. People are automatically subscribed to area forums when they log an ascent to the crag, mark a favorite crag or become an editor to a crag. They can control their configuration through their 'chat' tab in their thecrag web account. People can also manually subscribe to general forums and area forums.</p>

<p>TODO: manage subscriptions through API.</p>

<p>Please note that if somebody starts a discussion at a route level it will filter down to the crag area discussion.<p>


<h3>Area/route discussions</h3>

<p>Area/route discussions are special type of forum where the discussions are rolled up into their ancestor nodes. This means a discussion on a route will also appear in the cliff, crag and country discussions.</p>

<ul>
  <li><a href="http://dev.thecrag.com/api/forum/node/11740915?key=abc">http://dev.thecrag.com/api/forum/node/11740915</a></li>
  <li><a href="http://dev.thecrag.com/api/forum/node/11740915?page=2&key=abc">http://dev.thecrag.com/api/forum/node/11740915?page=2</a></li>
  <li><a href="http://dev.thecrag.com/api/forum/node/11740915?unreadOnly=1&key=abc">http://dev.thecrag.com/api/forum/node/11740915?unreadOnly=1</a></li>
</ul>

<p>The unreadOnly parameter requires OAuth to have identify the account.</p> 


<h3>Generic discussions</h3>

<p>API work to be completed</p>


<h3>Trip discussions</h3>

<p>API work to be completed</p>


<h3>Ascent discussions</h3>

<p>API work to be completed</p>



<h2>5.12 Markup</h2>

<p>You may POST a thecrag flavoured markdown string to an endpoint to have it marked up including internal links. The POST end point is:</p>
<pre class="code">
 POST http://www.thecrag.com/api/markup HTTP/1.1
  === header stuff === 

 {
   "data": {
     "type": "html",    # html/text
     "markdown": "Test *bold* and internal link to 'Grotto Wall' in 'Arapiles'.",
     "node": 11740915,
     "token": ["tlc"],  # list of zero or more of 'tlc', 'acronym', or 'parentAcronym'.
   }
 }
</pre>

<p>The node and token data variables tell the system the context for looking for internal links.</p>



<h2>5.13 Index Structure</h2>

<ul>
  <li><a href="http://dev.thecrag.com/api/index/summary/world?key=abc">http://dev.thecrag.com/api/index/summary/world</a></li>
  <li><a href="http://dev.thecrag.com/api/index/summary/11740915?key=abc">http://dev.thecrag.com/api/index/summary/11740915</a></li>
</ul>

<p>The world query returns the index structure from world node to top level crags. The id structure returns the index structure from tlc and lower. The returned structure excludes the queried node.<p>

<p>The returned JSON is an ordered array of nodes optimised for minimising down the wire data bandwidth. The information returned for each node is:</p>

<ul>
  <li>node ID</li>
  <li>node name</li>
  <li>node type: a - area, r - route, m - merged, w - world, n - annotation (you should only see 'a', 'r' and 'n').</li>
  <li>area type: optional, Fi - Field, U - unknown, Fe - Feature, B - Boulder, S - Sector, Cl - Cliff, Cr - Crag, R - Region, A - Area.</li>
  <li>parent ID: optional, if it is not there then it is the same as the previous node in the list.</li>
</ul>



<h2>5.14 Facet Search</h2>

<p>Facet search provides an interface into searching thecrag data using a url query language. You are able to search the following entities using facet search:</p>

<ul>
  <li>routes</li>
  <li>areas</li>
  <li>nodes</li>
  <li>ascents (thin facet available)</li>
  <li>favorites</li>
  <li>photos</li>
  <li>topos</li>
  <li>activity</li>
  <li>messages</li>
  <li>climbers</li>
</ul>

<p>The API facet search has the following generic endpoint structure:</p>

<pre class="code">
  /api/facet/{entity}/url/query/language  # where entity is as listed above.
</pre>

<p>The url query language is a series of uri argument pairs for directive and value, for example at/1234 specifies entities at node id 1234. You may also specify multiple values using the '+' character, for example at/1234+5678.</p>

<p>Results are paginated with page size settable in the url parameters, defaulting to 100 with a maximum of 5000.</p>

<p>The following specific URL parameters may be set:</p>

<ul>
  <li>page</li>
  <li>perPage</li>
  <li>sortby</li>
</ul>

<p>The sortby parameter is a comma separated list of pairs (field,asc/desc), for example 'at,desc'.</p>

<p>Before you start using these please be aware that some faceted searches may be very resource intensive. Please discuss with site management the queries you intend to use, otherwise we may have to disable your key.</p>

<p>Some of the facet queries have a thin format where the data returned is as an array and referenced resources in a inflate hash, for example:

<pre class="code">
data:
  ascents : []
  inflate : {}
</pre>

<p>To enable thin format use thin=1 parameter which changes the return format to an array. The 'withdata' parameter tells the system which fields to return in the array. Also use the 'inflate' parameter to tell the system to include inflated resources. The format for the inflate parameter is comma separted list of resource type with a level scope. For example:</p>


<ul>
  <li>inflate=account:skeleton,node:summary</li>
  <li>inflate=account,node:summary</li>
</ul>

<p>The idea of the level is to return the level of detail you want to inflate resources. Levels will default to skeleton if not specified. Generally the following levels are accepted.</a>

<ul>
  <li>skeleton</li>
  <li>summary</li>
  <li>full</li>
</ul>

<h3>Routes</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>created-by</li>
  <li>by</li>
  <li>created-by-friends-of</li>
  <li>by-friends-of</li>
  <li>at-followed-by</li>
  <li>at</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>created-after</li>
  <li>created-before</li>
  <li>created-between</li>
  <li>with-stars</li>
  <li>with-grade</li>
  <li>with-gear-style</li>
  <li>is</li>
  <li>missing</li>
  <li>has-been</li>
  <li>length-shorter</li>
  <li>length-longer</li>
  <li>length-between</li>
  <li>search</li>
  <li>prefix-search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
  <li>when-fa</li>
  <li>when-history # this may result in dups</li>
  <li>at</li>
  <li>stars</li>
  <li>length</li>
  <li>grade</li>
  <li>gear-style</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/routes/at/11741371/with-grade/AU:21:39/?key=abc&sortby=stars,desc">http://dev.thecrag.com/api/facet/routes/at/11741371/with-grade/AU:21:39/?sortby=stars,desc</a></li>
</ul>


<h3>Areas</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>at</li>
  <li>of-area-type</li>
  <li>created-after</li>
  <li>created-before</li>
  <li>created-between</li>
  <li>search</li>
  <li>prefix-search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
  <li>at</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/area/at/11737699/of-area-type/crag/prefix-search/arap/?key=abc">http://dev.thecrag.com/api/facet/areas/at/11737699/of-area-type/crag/prefix-search/arap/</a></li>
</ul>


<h3>Nodes</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>at</li>
  <li>of-node-type</li>
  <li>created-after</li>
  <li>created-before</li>
  <li>created-between</li>
  <li>search</li>
  <li>prefix-search</li>
  <li>fuzzy-search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
  <li>at</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/nodes/of-node-type/route/at/11741371/fuzzy-search/spinning/?key=abc">http://dev.thecrag.com/api/facet/nodes/of-node-type/route/at/11741371/fuzzy-search/spinning/</a></li>
</ul>


<h3>Ascents</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>by</li>
  <li>on</li>
  <li>at</li>
  <li>by-friends-of</li>
  <li>at-followed-by</li>
  <li>since</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>logged-after</li>
  <li>logged-before</li>
  <li>logged-between</li>
  <li>with-tick-group</li>
  <li>with-quality</li>
  <li>with-route-grade</li>
  <li>with-route-gear-style</li>
  <li>with-route-stars</li>
  <li>route-is</li>
  <li>route-length-shorter</li>
  <li>route-length-longer</li>
  <li>route-length-between</li>
  <li>search</li>
  <li>search-comment</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>since</li>
  <li>when</li>
  <li>when-climbed</li>
  <li>by</li>
  <li>at</li>
  <li>tick-type</li>
  <li>route-stars</li>
  <li>route-length</li>
  <li>route-grade</li>
  <li>route-gear-style</li>
  <li>route-bolts</li>
</ul>

<p>Note that the since facet returns any ascents that have been created or updated since the epoch provided. You can also edit sort by since.</p>

<p>The format for the since parameter is unix epoch. The format for other date fields is '2014-12-19' where day or day and month can be '00' for searches based on day or month.</p>

<p>The ascents filter has a thin mode available, use thin=1 paramenter to enable and withdata=field1,field2,field3,... to specify which data fields to return. The fields available are:</p>

<ul>
  <li>AscentID</li>
  <li>CreateDate</li>
  <li>Date</li>
  <li>LastUpdated</li>
  <li>AccountID: If inflate=account is specified each account is inflated.</li>
  <li>NodeID: The route associated with the ascent. If inflate=node is specified each node is inflated.</li>
  <li>Tick</li>
  <li>Label</li>
  <li>Ancestors: list of ancestor ids in depth order. If inflate=node is specified each id is inflated.</li>
  <li>Historical: A flag which indicates if the tick was logged historically (used in streams).</li>
  <li>Artificial: A flag which indicates if the route is in a gym.</li>
  <li>Grade: array of grade id, grade and grading system.</li>
  <li>AltGrade: array of grade id, grade and grading system.</li>
  <li>Band: experience band of route as an integer</li>
  <li>Height: in meters</li>
  <li>GradeScore: internal grade score for the route 0-500 (actually it may be open ended).</li>
  <li>Comment: use parameter markupType=text for text markup or markupType=html markup. If you want to markup keywords use keywordMarkup=1.</li>
  <li>With: Array of with string followed my account ids. Use parameter markupType=text for text markup or markupType=html markup. If inflate=account is specified each id is inflated.</li>
  <li>Pitch: array of pitches, each pitch is an array of [number,leadby,rating system,grade,alt rating system,alt grade,linkup].</li>
  <li>Quality</li>
  <li>Channel: the channel used to log the ascent. Eg the app will have it's own channel id.</li>
  <li>Competition: the competition the ascent was logged in.</li>
  <li>Shot</li>
  <li>Trip</li>
  <li>RelativeDifficulty</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/ascents/at/11740915/by/9068185/?key=abc&sortby=route-grade,desc">http://dev.thecrag.com/api/facet/ascents/at/11740915/by/9068185/?sortby=route-grade,desc</a></li>
  <li><a href="http://dev.thecrag.com/api/facet/ascents/at/11740915/by/scd?key=abc&thin=1&withdata=AscentID,CreateDate,Date,LastUpdated,AccountID,NodeID,Tick,Label,Ancestors,Historical,Artificial,Grade,AltGrade,Band,Height,GradeScore,Comment,With,Pitch,Quality,Channel,Competition,Shot,Trip,RelativeDifficulty&inflate=node:skeleton,account:skeleton&markupType=text">http://dev.thecrag.com/api/facet/ascents/at/11740915/by/scd?key=abc&thin=1&withdata=AscentID,CreateDate,Date,LastUpdated,AccountID,NodeID,Tick,Label,Ancestors,Historical,Artificial,Grade,AltGrade,Band,Height,GradeScore,Comment,With,Pitch,Quality,Channel,Competition,Shot,Trip,RelativeDifficulty&inflate=node:skeleton,account:skeleton&markupType=text</a></li>
</ul>


<h3>Favorites</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>by</li>
  <li>at</li>
  <li>by-friends-of</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
  <li>by</li>
  <li>at</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/favorites/at/11740915+11741371/?key=abc">http://dev.thecrag.com/api/facet/favorites/at/11740915+11741371/</a></li>
</ul>


<h3>Photos</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>uploaded-by</li>
  <li>taken-by</li>
  <li>of</li>
  <li>uploaded-by-friends-of</li>
  <li>taken-by-friends-of</li>
  <li>of-friends-of</li>
  <li>at-followed-by</li>
  <li>on</li>
  <li>at</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>uploaded-after</li>
  <li>uploaded-before</li>
  <li>uploaded-between</li>
  <li>with-route-grade</li>
  <li>with-route-gear-style</li>
  <li>with-route-stars</li>
  <li>route-is</li>
  <li>route-length-shorter</li>
  <li>route-length-longer</li>
  <li>route-length-between</li>
  <li>search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
  <li>when-taken</li>
  <li>uploaded-by</li>
  <li>taken-by</li>
  <li>uploaded-of</li>
  <li>at</li>
  <li>route-stars</li>
  <li>route-length</li>
  <li>route-grade</li>
  <li>route-gear-style</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/photos/at/11740915/with-route-stars/3/?key=abc">http://dev.thecrag.com/api/facet/photos/at/11740915/with-route-stars/3/</a></li>
</ul>


<h3>Topos</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>at</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>at</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/topos/at/11740915/?key=abc">http://dev.thecrag.com/api/facet/topos/11740915/</a></li>
</ul>


<h3>Activity</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>by</li>
  <li>at</li>
  <li>by-friends-of</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>with-time</li>
  <li>with-route-grade</li>
  <li>is</li>
  <li>for</li>
  <li>with-route-gear-style</li>
  <li>with-route-stars</li>
  <li>route-is</li>
  <li>route-length-shorter</li>
  <li>route-length-longer</li>
  <li>route-length-between</li>
  <li>search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>by</li>
  <li>at</li>
  <li>item</li>
  <li>for</li>
  <li>route-stars</li>
  <li>route-length</li>
  <li>route-grade</li>
  <li>route-gear-style</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/activity/at/11740915/by-friends-of/9068185/?key=abc">http://dev.thecrag.com/api/facet/activity/at/11740915/by-friends-of/9068185/</a></li>
</ul>


<h3>Messages</h3>

<p>The url query string may contain the following search directives:</p>
<ul>
  <li>at</li>
  <li>at-followed-by</li>
  <li>from</li>
  <li>involving</li>
  <li>after</li>
  <li>before</li>
  <li>between</li>
  <li>since-message</li>
  <li>search</li>
</ul>

<p>The following sort by:</p>
<ul>
  <li>when</li>
</ul>

<p>For example:</p>
<ul>
  <li><a href="http://dev.thecrag.com/api/facet/messages/involving/9068185/since-message/218342559/?key=abc">http://dev.thecrag.com/api/facet/messages/involving/9068185/since-message/218342559/</a></li>
</ul>

<p>Note that if the filter does not include an 'at' directive then only messages involving the authorised account (OAuth) will be returned.</p>

<p>Use the 'markupType' parameter to markup message content - set to 'none', 'html' or 'text'. Markup includes internal links. If you do not set this parameter then the client will be responsible for the markup.</p>

<p>Use the 'truncate' parameter if you want to limit the message content length. Note that because message content can include html the truncate will nicely truncate at a word boundary shorter that the length specified.</p>


<h3>Climbers</h3>

<p>Not implemented</p>



<h2>5.15 Text completion</h2>

<p>There are some fast prefix lookup end points which can be used for text completion, for example in a crag search toolbar. Text completion examples:</p>

<ul>
  <li><a href="http://dev.thecrag.com/api/lookup/crag?search=ara&key=abc">http://dev.thecrag.com/api/lookup/crag?search=ara</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/crag?search=new&mode=crag,region&key=abc">http://dev.thecrag.com/api/lookup/crag?search=new&mode=crag,region</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/crag?search=new&mode=region&page-size=5&key=abc">http://dev.thecrag.com/api/lookup/crag?search=new&mode=region&page-size=5</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/climber?search=campb&key=abc">http://dev.thecrag.com/api/lookup/climber?search=campb</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/climber?search=campb&mode=name&key=abc">http://dev.thecrag.com/api/lookup/climber?search=campb&mode=name</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/climber?search=campb&mode=login&key=abc">http://dev.thecrag.com/api/lookup/climber?search=campb&mode=login</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/climber?search=support@thecrag.com&mode=email&key=abc">http://dev.thecrag.com/api/lookup/climber?search=support@thecrag.com&mode=email</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/climber?search=9068185&mode=id&key=abc">http://dev.thecrag.com/api/lookup/climber?search=9068185&mode=id</a></li>
  <li><a href="http://dev.thecrag.com/api/lookup/climber?search=support@thecrag.com&mode=server&key=abc">http://dev.thecrag.com/api/lookup/climber?search=support@thecrag.com&mode=server</a></li>
</ul>

<p>For a crag search, if parameter 'mode' is set to 'region' then the search space is for regions only otherwise it is for areas identified as a Crag.</p>

<p>If you don't want a long list to be returned they you should specify the 'page-size' parameter.</p>

<p>For a climber search you can set the following mode behavious:</p>
<ul>
  <li>login: The search space returns prefix matches from the persons login.</li>
  <li>name: The search space returns prefix matches from the persons name. Please note that because a person's name is in one field it does not prefix match somebodies last name.</li>
  <li>email: The search space returns exact matches for an email address. Please note that partial email addresses are not matched.</li>
  <li>id: The search space returns exact matches for an persons id. Please note that partial ids are not matched.</li>
  <li>all: Matches all of the above. This uses more server resources and is slower, please use mode=server instead.</li>
  <li>server: (default) This tells the server to decide which to match based on the search string. If it has an @ in the search space then it is assumed to be an email search, otherwise if all numbers then it is a login and id seach, otherwise if no spaces then it is a login and name search, otherwise a name search. This is the default search because it allows a user of an application to put in some text and the server can work out what the user meant without having the server overhead of processing 'all' modes.</li>
</ul>




<h1 id="s6">6. Optimising down the wire</h1>

<p>Because they are hash based, some of the endpoints described in this API have a heavy over-the-wire burden with unneccessary information. While this is fine for some clients, it is not ideal for others where data transfer rates are limited and/or client memory is limited.</p>

<p>This section describes how you can use the 'flatten' parameter to better optimise the data transfer over the wire. The flatten variable turns the result hash structures into an array only including values associated with keys you specified. The flatten spec can be nested so you can flatten sub hashes.</p>

<pre class="code">
  flatten=key1,key2[subKeyA,subKeyB]
</pre>

<p>Below are a couple of examples of how this may work:</p>

<ul>
  <li><a href="http://dev.thecrag.com/api/facet/routes/at/11741371?flatten=data[numberRoutes,routes[id,grade,name]]&key=abc">http://dev.thecrag.com/api/facet/routes/at/11741371?flatten=data[numberRoutes,routes[id,grade,name]]</a></li>
  <li><a href="http://dev.thecrag.com/api/discussion/191502618?flatten=data[messages[id,markdown,subject,from[id],node[id]]]&key=abc">http://dev.thecrag.com/api/discussion/191502618?flatten=data[messages[id,markdown,subject,from[id],node[id]]]</a></li>
</ul>



<h1 id="s7">7. Update access points</h1>

<p>Unless otherwise stated all API update access points require utf8 encoded text.</p>

<p>The update API end points require an application/json MIME type POST, with the POST content being json formatted utf8 text. The post can be a single update or multiple update. The format of a single update is:</p>

<pre class="code">
  data: {
   …
  }
</pre>

<p>The format of a multiple update is:</p>

<pre class="code">
  data: [{
     …
   },{
     …
  }]
</pre>

<p>Update API end points return either HTTP_ACCEPTED or HTTP_BAD_REQUEST, and application/json MIME type with the supplied data fields, and either an ‘ok’ or ‘error’ data field.</p>

<p>If an error was encountered the error message has the same structure as the data field, for example:</p>

<pre class="code">
  error: [{
   loginError: “not unique”,
  }]
</pre>

<p>Where the ‘loginError’ corresponds to the ‘login’ input data field.</p>

<p>If the update was successful then an ‘ok’ field is returned, for example:</p>

<pre class="code">
  ok: [{
   accountID: 1234
   uri: ‘/climber/1234’
  }]
</pre>

<p>Note that if an entity has been created then the id of that entity and the canonical uri is returned. Core entities that can be created using the API include:</p>
<ul>
  <li><strong>climber</strong>: returns accountID if successfully created</li>
  <li><strong>area</strong>: returns nodeID if successfully created</li>
  <li><strong>route</strong>: returns nodeID if successfully created</li>
  <li><strong>ascent</strong>: returns ascentID if successfully created</li>
  <li><strong>trip</strong>: returns tripID if successfully created (not implemented yet)</li>
</ul>

<p>There are separate end points for each of the core entities for creating, updating and deleting. Each of these end points has a paired validate call. For example 'climber/create' is paired with 'climber/create/validate'. The paired validate API call is an end point in it's own right, but is also called internally by the update end point.</p>

<p><strong>Developer style note</strong>: You should always call the paired validate API end point before calling the update end point.</p>

<p>Note that none of the delete API end-points are implemented yet.</p>


<h2>6.1 Create Climber</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/climber/create
  http://www.thecrag.com/api/climber/create/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>login</strong>: mandatory, must be unique in system.</li>
  <li><strong>password</strong>: mandatory</li>
  <li><strong>email</strong>: mandatory</li>
  <li><strong>name</strong>: highly recommended, but optional if you really cannot supply a name.</li>
  <li><strong>countryID</strong>: highly recommended, but optional if you really cannot supply a country ID.</li>
  <li><strong>termsVersionID</strong>: for web signup</li>
  <li><strong>list</strong>: flag to indicate whether to list account in public directories (default yes)</li>
  <li><strong>private</strong>: flag to indicate that it is a private account (default no)</li>
</ul>

<p>The system has tens of thousands of login names registered so there is a very high probability that a create climber API request will return an error because the login already exists.</p>

<p>The countryID is the country identifier in the system. This is not the node identifier associated with the country. You may get a list of country identifiers by using the following API call (also see examples above):</p>

<pre class="code">
  http://www.thecrag.com/api/country/list
</pre>

<p>The termsVersionID indicates that the user has accepted specific terms and conditions. Accepting terms and conditions is required if the user is accessing the system via thecrag.com website. If the user has not accepted the terms and conditions then they will be asked to accept them the first time they log into the website. It's good programing practice to get a user to accept terms and conditions, but from the API perspective this is seen as a client application responsibility. If you want to integrate your application to the systems terms and conditions then let us know because we will have to make some enhancements to the API.</p>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/climber/create/validate HTTP/1.1
  === header stuff === 

 {
   "data": {
     "email" : "bla",
     "password" : "abc",
     "name" : "simon dale",
     "login" : "SCD"
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "error": {
     "loginError" : "login already in use"
   },
   "data": {
     "email" : "bla",
     "password" : "abc",
     "name" : "simon dale",
     "login" : "SCD"
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/climber/create/validate HTTP/1.1
  === header stuff === 

 {
   "data": [{
       "email" : "bla",
       "password" : "abc",
     },{
       "email" : "bla2",
   }]
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "error": [{
      "loginError" : "mandatory field",
     },{
      "loginError" : "mandatory field",
      "passwordError" : "mandatory field",
   }]
   "data": [{
       "email" : "bla",
       "password" : "abc",
     },{
       "email" : "bla2",
   }]
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/climber/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "email" : "bla",
     "password" : "abc",
     "name" : "simon dale",
     "login" : "SOMEUNIQUENAME"
     "list" : "yes",
     "private" : 0,
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "accountID" : "1234",
     "uri" : "/climber/1234"
   },
   "data": {
     "email" : "bla",
     "password" : "abc",
     "name" : "simon dale",
     "login" : "SOMEUNIQUENAME"
     "list" : "yes",
     "private" : 0,
   }
 }
</pre>
    </td>
  </tr>
</table>


<h2>6.2 Update Climber</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/climber/update
  http://www.thecrag.com/api/climber/update/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>accountID</strong>: </li>
  <li><strong>favorite</strong>: hash identifying which node to (de)select as a shortcut.</li>
  <li><strong>follow</strong>: hash identifying which account to (un)link as a linked account.</li>
</ul>

<p>The update climber accessp point is under development. Currently you can only (un)link to other accounts and (de)select shortcuts.</p>

<p>To (de)select a node as a shortcut use the favorite variable, which has the following format:</p>
<pre class="code">
  node: 1234,
  status: 0/1
</pre>

<p>Set status to 1 to select as favorite, set to 0 to deselect as favorite.</p>

<p>To (un)link to another account use the follow variable, which has the following format:</p>
<pre class="code">
  account: 1234,
  status: 0/1
</pre>

<p>Set status to 1 to follow an account, 0 to unfollow an account.</p>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/climber/update HTTP/1.1
  === header stuff === 

 {
   "data": {
     "accountID" : "1234",
     "favorite" : {
       "node": "6789",
       "status": "1",
     }
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "uri" : "/climber/1234"
   },
   "data": {
     "accountID" : "1234",
     "favorite" : {
       "node": "6789",
       "status": "1",
     }
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/climber/update HTTP/1.1
  === header stuff === 

 {
   "data": {
     "accountID" : "1234",
     "follow" : {
       "account": "4567",
       "status": "1",
     }
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "uri" : "/climber/1234"
   },
   "data": {
     "accountID" : "1234",
     "follow" : {
       "account": "4567",
       "status": "1",
     }
   }
 }
</pre>
    </td>
  </tr>
</table>



<h2>6.3 Create Area</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/area/create
  http://www.thecrag.com/api/area/create/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>submittor</strong>: mandatory accountID submitting the area.</li>
  <li><strong>parent</strong>: mandatory parent nodeID.</li>
  <li><strong>name</strong>: mandatory name of area.</li>
  <li><strong>alternateNames</strong>: optional hash describing alternate names.</li>
  <li><strong>type</strong>: mandatory area type.</li>
  <li><strong>insertBefore</strong>: optional nodeID for inserting before a sibling node.</li>
  <li><strong>beta</strong>: optional hash for description fields.</li>
  <li><strong>publisherID</strong>: optional publisherID if submission associated with a publisher.</li>
  <li><strong>publicationID</strong>: optional publicationID if submission associated with a publication.</li>
</ul>

<p>The type variable may be one of (see <a href="/article/AreaTypes">Area Types</a> article):</p>
<ul>
  <li>Area</li>
  <li>Region</li>
  <li>Crag</li>
  <li>Cliff</li>
  <li>Sector</li>
  <li>Field</li>
  <li>Boulder</li>
  <li>Feature</li>
</ul>

<p>The alternateNames variable is a hash with the following format:</p>
<pre class="code">
  type: string,
  name: string
</pre>

<p>The type sub-variable may be one of:</p>
<ul>
  <li>Offensive</li>
  <li>Language</li>
  <li>Historical</li>
  <li>Alternate</li>
</ul>

<p>The beta variable is a hash with the following format:</p>
<pre class="code">
  type: string,
  description: string
</pre>

<p>The type sub-variable may be one of (see <a href="/article/UpdatingDescriptions">Write Descriptions</a> article):</p>
<ul>
  <li>Description</li>
  <li>Access</li>
  <li>Approach</li>
  <li>Unique Features And Strengths</li>
  <li>Where To Stay</li>
  <li>Descent Notes</li>
  <li>Ethic</li>
  <li>Rest Day Activities</li>
  <li>History</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/area/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "name": "somecliff",
     "type": "Cliff",
     "alternateNames": [{
       "type": "Historical",
       "name": "historical name",
     }],
     "beta": [{
       "type": "Description",
       "description": "some description",
     }],
     "parent": 5678,
     "submittor": 7890,
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "nodeID" : "1234",
     "uri" : "/area/1234"
   },
   "data": {
     "name": "somecliff",
     "type": "Cliff",
     "alternateNames": [{
       "type": "Historical",
       "name": "historical name",
     }],
     "beta": [{
       "type": "Description",
       "description": "some description",
     }],
     "parent": 5678,
     "submittor": 7890,
   }
 }
</pre>
    </td>
  </tr>
</table>



<h2>6.4 Update Area</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/area/update
  http://www.thecrag.com/api/area/update/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>submittor</strong>: mandatory</li>
  <li><strong>node</strong>: mandatory</li>
  <li><strong>name</strong>: optional, only use if updating principle name</li>
  <li><strong>alternateNames</strong>: optional hash if updating alternate names.</li>
  <li><strong>insertBefore</strong>: optional, only use if reordering</li>
  <li><strong>type</strong>: optional, only use if changing area type</li>
  <li><strong>beta</strong>: optional, only use if updating beta</li>
  <li><strong>publisher</strong>: optional, use if you want to add/update a description for a publisher.</li>
  <li><strong>publication</strong>: optional, only use if updating the publication an area description is associated with</li>
</ul>

<p>The alternateNames variable includes an 'action' sub-variable which may be set to 'add' or 'delete'.</p>

<p>To update community beta then you do not include a publisher, otherwise if you include a publisher the publishers beta will be updated.</p>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/area/update HTTP/1.1
  === header stuff === 

 {
   "data": {
     "node": 1234,
     "submittor": 7890,
     "name": "new primary name",
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "uri" : "/area/1234"
   },
   "data": {
     "node": 1234,
     "submittor": 7890,
     "name": "new primary name",
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/area/update HTTP/1.1
  === header stuff === 

 {
   "data": {
     "node": 1234,
     "submittor": 7890,
     "alternateNames": [{
       "type": "Historical",
       "name": "historical name",
       "action": "delete",
     }],
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "uri" : "/area/1234"
   },
   "data": {
     "node": 1234,
     "submittor": 7890,
     "alternateNames": [{
       "type": "Historical",
       "name": "historical name",
       "action": "delete",
     }],
   }
 }
</pre>
    </td>
  </tr>
</table>



<h2>6.5 Create Route</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/route/create
  http://www.thecrag.com/api/route/create/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>submittor</strong>: mandatory</li>
  <li><strong>parent</strong>: mandatory</li>
  <li><strong>name</strong>: mandatory</li>
  <li><strong>alternateNames</strong>: optional hash of alternate names.</li>
  <li><strong>insertBefore</strong>: optional</li>
  <li><strong>beta</strong>: optional hash (same as creating area, but only 'Description' field is available).</li>
  <li><strong>publisher</strong>: optional publisherID</li>
  <li><strong>publication</strong>: optional publicationID</li>
  <li><strong>context</strong>: mandatory</li>
  <li><strong>heightText</strong>: optional</li>
  <li><strong>pitches</strong>: optional</li>
  <li><strong>bolts</strong>: optional</li>
  <li><strong>topRopeFlag</strong>: optional</li>
  <li><strong>isProjectFlag</strong>: optional</li>
  <li><strong>gearStyle</strong>: mandatory</li>
  <li><strong>history</strong>: optional</li>
  <li><strong>lat</strong>: optional</li>
  <li><strong>long</strong>: optional</li>
  <li><strong>gradeText</strong>: optional</li>
  <li><strong>citation</strong>: optional</li>
</ul>

<p>The context variable sets the context for the system to parse grades. Note that globally some grading systems confict. You may get the context from the country and the country from the ancestor list. For example:</a>.

<pre class="code">
  http://www.thecrag.com/api/area/id/11740915/ancestors
  http://www.thecrag.com/api/country/id/7478254
</pre>

<p>The gearStyle variable may be one of (see <a href="/article/Styles">Route Styles</a> article):</p>
<ul>
  <li>Unknown</li>
  <li>Trad</li>
  <li>Sport</li>
  <li>DWS</li>
  <li>Aid</li>
  <li>Via ferrata</li>
  <li>Boulder</li>
  <li>Ice</li>
  <li>Alpine</li>
  <li>Top rope</li>
</ul>

<p>The history variable is a hash with the following format:</p>
<pre class="code">
  type: string,
  date: YYYY-MM-DD
  climbers: string,
  diary: string
</pre>

<p>The type sub-variable may be one of:</p>
<ul>
  <li>First Ascent</li>
  <li>First Free Ascent</li>
</ul>
<p>The date sub-variable may have either DD as '00' or both MM and DD as '00'.</p>

<p>The heightText variable is a text string describing the height. If it is a single number it is assumed to be in metres. You may input using feet by using ft units (eg '100ft') or you may input multiple pitches using comma (eg '20,45,27').</p>

<p>The gradeText variable is a text string describing the grade as it would be seen in a guidebook. This may be fairly complex and could include grade ranges, stars, protection ratings, partial grades, and aid. For example in the US context the system would understand the following grade texts:</p>
<ul>
  <li>5.10a</li>
  <li>5.10</li>
  <li>10a</li>
  <li>5.11b-d</li>
  <li>5.11c/d</li>
  <li>5.11a A3</li>
  <li>5.9, 5.10a, 5.10d, 5.8</li>
  <li>5.10</li>
  <li>5.10d X</li>
  <li>5.10d **</li>
</ul>

<p>The citation variable must be used with a publicationID and describes references where the route grade may be found in the publication (can be a URL or page number) depending on the nature of the publication.</p>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/route/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "name": "some route",
     "beta": [{
       "type": "Description",
       "description": "some description",
     }],
     "parent": 82079136,
     "submittor": 9068185,
     "context": "AU",
     "gearStyle": "Trad",
     "heightText": "24,26",
     "pitches": "3",
     "bolts": "4",
     "gradeText": "12,22M1",
     "history": [{
         "type" : "First Ascent",
         "date" : "2011-02-09",
         "climbers" : "some climber",
         "diary" : "diary entry"
       },{
         "type" : "First Free Ascent",
         "date" : "2011-00-00",
         "climbers" : "another climber",
         "diary" : "another entry"
     }],
     "lat": 45.45,
     "long": -22.45,
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "nodeID" : "1234",
     "uri" : "/route/1234"
   },
   "data": {
     "name": "some route",
     "beta": [{
       "type": "Description",
       "description": "some description",
     }],
     "parent": 82079136,
     "submittor": 9068185,
     "context": "AU",
     "gearStyle": "Trad",
     "heightText": "24,26",
     "pitches": "3",
     "bolts": "4",
     "gradeText": "12,22M1",
     "history": [{
         "type" : "First Ascent",
         "date" : "2011-02-09",
         "climbers" : "some climber",
         "diary" : "diary entry"
       },{
         "type" : "First Free Ascent",
         "date" : "2011-00-00",
         "climbers" : "another climber",
         "diary" : "another entry"
     }],
     "lat": 45.45,
     "long": -22.45,
   }
 }
</pre>
    </td>
  </tr>
</table>



<h2>6.6 Update Route</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/route/create
  http://www.thecrag.com/api/route/create/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>submittor</strong>: mandatory</li>
  <li><strong>node</strong>: mandatory</li>
  <li><strong>name</strong>: optional, use only if changing name</li>
  <li><strong>alternateNames</strong>: optional hash as per update area end point</li>
  <li><strong>insertBefore</strong>: optional, use if reordering</li>
  <li><strong>beta</strong>: optional hash as per update area end point (only the Description type is available for routes)</li>
  <li><strong>publisher</strong>: optional publisherID to be used with beta</li>
  <li><strong>publication</strong>: optional publicationID to be used with beta or citation</li>
  <li><strong>context</strong>: optional unless gradeText is used</li>
  <li><strong>heightText</strong>: optional, use if changing height</li>
  <li><strong>pitches</strong>: optional, use if changing pitches</li>
  <li><strong>bolts</strong>: optional, use if changing bolts</li>
  <li><strong>topRopeFlag</strong>: optional, use if changing top rope flag</li>
  <li><strong>isProjectFlag</strong>: optional, use if changing project flag</li>
  <li><strong>gearStyle</strong>: optional, use if changing gear style</li>
  <li><strong>lat</strong>: optional, use if changing latidude and longitude</li>
  <li><strong>long</strong>: optional, use if changing latidude and longitude</li>
  <li><strong>citation</strong>: optional, use if changing publicication citation</li>
  <li><strong>gradeText</strong>: optional, use if changing/adding grade contribution from a user or publication.</li>
  <li><strong>registeredGrade</strong>: optional hash that you can use to add/update the registered grade of the route.</li>
</ul>

<p>Note that multiple users and/or publications may contribute a grade contribution. When you create a route it will initially have at most one grade contribution. To add multiple grade contributions you must use the update route end point. If a publication is provided with gradeText then then it is assumed that it is a publication contribution, otherwise the contribution is assumed to be a user contribution. If the publisher/user has already made a grade contribution then their entry is updated, otherwise a new entry is added.<p>

<p>Updating gradeText will not update the registered grade for the climb unless there are no existing grade contributions.<p>

<p>To update the registered grade for a route you must use the registeredGrade variable. This will not be associated with a user or publisher. The registeredGrade hash has the following format:<p>
<pre class="code">
  system: string,
  lower: grade,
  upper: grade
</pre>

<p>The system sub-variable should be one the system labels defined by the following configuration end point:</p>
<pre class="code">
  http://dev.thecrag.com/api/config/grade/system
</pre>

<p>The upper grade is optional and is used to specify a grade range.</p>

<p>If the lower grade is not specified then the registered grade is removed from the system, otherwise the registered grade is either updated or added to the system.</p>

<p>Both the lower and upper grades must exactly match the grade type (as defined by the grade system configuration end point above).</p>

<p>A route may have registered grades for multiple systems (eg French and Australian registered grades in Thailand).</p>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/route/update HTTP/1.1
  === header stuff === 

 {
   "data": {
     "node": 1234,
     "submittor": 5678,
     "registeredGrade": [{
       "system": "YDS",
       "lower": "5.10a",
     }],
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "uri" : "/route/1234"
   },
   "data": {
     "node": 1234,
     "submittor": 5678,
     "registeredGrade": [{
       "system": "YDS",
       "lower": "5.10a",
     }],
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/route/update HTTP/1.1
  === header stuff === 

 {
   "data": {
     "node": 1234,
     "submittor": 5678,
     "context": "YDS",
     "gradeText": "5.11a,5.11d,5.9,5.10",
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "uri" : "/route/1234"
   },
   "data": {
     "node": 1234,
     "submittor": 5678,
     "context": "YDS",
     "gradeText": "5.11a,5.11d,5.9,5.10",
   }
 }
</pre>
    </td>
  </tr>
</table>


<h2>6.7 Create Ascent</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/ascent/create
  http://www.thecrag.com/api/ascent/create/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>account</strong>: mandatory accountID</li>
  <li><strong>node</strong>: mandatory nodeID</li>
  <li><strong>tick</strong>: optional tick type (defaults to 'tick')</li>
  <li><strong>date</strong>: optional, YYYY-MM-DD</li>
  <li><strong>label</strong>: optional, use if you want to label the ascent with something other then the route name of the given node.</li>
  <li><strong>shot</strong>: optional shot number</li>
  <li><strong>quality</strong>: optional quality rating</li>
  <li><strong>gradeSystem</strong>: optional but mandatory if using grade</li>
  <li><strong>grade</strong>: optional, defaults to route grade of the given node.</li>
  <li><strong>relativeDifficulty</strong>: optional relative difficulty rating (relative to given grade)</li>
  <li><strong>trip</strong>: optional tripID</li>
  <li><strong>comment</strong>: optional markdown comment</li>
  <li><strong>isDefault</strong>: optional, use if you want to make this the default ascent for the node when you have multiple ascents associated with the node (please note that this feature is under review and may be automated at some point).</li>
  <li><strong>postOnFacebook</strong>: optional flag indicating whether to post onto the users Facebook account. Note that they must have pre-configured this option in their account for it to work.</li>
  <li><strong>shotAggregationToken</strong>: optional flag indicating that multiple ascent shots should be aggregated in a single facebook posting (must be used with the postOnFacebook flag)</li>
</ul>

<p>The tick variable may be one of:</p>
<ul>
  <li>firstfreeascent</li>
  <li>attempt</li>
  <li>working</li>
  <li>retreat</li>
  <li>target</li>
  <li>mark</li>
  <li>tick</li>
  <li>clean</li>
  <li>lead</li>
  <li>onsight</li>
  <li>flash</li>
  <li>redpoint</li>
  <li>pinkpoint</li>
  <li>dog</li>
  <li>second</li>
  <li>secondclean</li>
  <li>secondrest</li>
  <li>solo</li>
  <li>toprope</li>
  <li>topropeclean</li>
  <li>toproperest</li>
  <li>aid</li>
  <li>aidsolo</li>
  <li>firstascent</li>
  <li>ghost</li>
  <li>hit</li>
</ul>

<p>The quality variable may be one of:</p>
<ul>
  <li>crap</li>
  <li>poor</li>
  <li>average</li>
  <li>good</li>
  <li>excellent</li>
  <li>classic</li>
  <li>megaclassic</li>
</ul>

<p>The relativeDifficulty variable may be one of:</p>
<ul>
  <li>soft</li>
  <li>easy</li>
  <li>average</li>
  <li>hard</li>
  <li>sand</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/ascent/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "account": 1234,
     "submittor": 5678,
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "ascentID" : "3344"
     "uri" : "/ascent/3344"
   },
   "data": {
     "account": 1234,
     "submittor": 5678,
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/ascent/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "account": 1234,
     "submittor": 5678,
     "tick": "onsight",
     "quality": "classic",
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "ascentID" : "3344"
     "uri" : "/ascent/3344"
   },
   "data": {
     "account": 1234,
     "submittor": 5678,
     "tick": "onsight",
     "quality": "classic",
   }
 }
</pre>
    </td>
  </tr>
</table>



<h2>6.8 Send message</h2>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/message/send
  http://www.thecrag.com/api/message/send/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>fromAccount</strong>: accountID - mandatory.</li>
  <li><strong>content</strong>: abc - optional, max 5096, either 'subject' or 'content' mandatory.</li>
  <li><strong>subject</strong>: abc - optional.</li>
  <li><strong>toAccount</strong>: [accountID] - optional, either 'toAccount', 'toGroup' or 'createGroup' mandatory. You cannot send to both an account and group.</li>
  <li><strong>toGroups</strong>: [groupID] - optional - groupID is synonym for forumID.</li>
  <li><strong>createGroup</strong>: {name:xyz, type:'Area Forum', prn:nodeID} - optional, if an area forum does not exist for a node then one can be created on-the-fly.</li>
  <li><strong>node</strong>: node - optional, this should be used when posting to an area forum as an additional field. It determines the 'rollup'.</li>
  <li><strong>ascent</strong>: ascentID - optional.</li>
  <li><strong>trip</strong>: tripID - optional - note you can post to a node, trip or and ascent, but not more than one of these.</li>
  <li><strong>responseTo</strong>: root message of a discussion thread - optional, if you are starting a new discussion then you omit this, otherwise you must use the root message id for discussion responses.</li>
</ul>

<p>The create group type variable may be one of:</p>
<ul>
  <li>Area Forum</li>
  <li>Global Forum</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/message/send HTTP/1.1
  === header stuff === 

 {
   "data": {
     "fromAccount": 9068185,
     "content": "some test message",
     "toAccounts": [9068185],
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "messageID=>1234,
     "subject" => undef,
     "surrogate" => "some test message",
     "markupHTML" => "&lt;p&gt;some test message&lt;/p&gt;",
   },
   "data": {
     "fromAccount": 9068185,
     "content": "some test message",
     "toAccounts": [9068185],
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/message/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "fromAccount": 9068185,
     "subject": "test subject",
     "content": "test message",
     "toGroups": [172682874],
     "node": 11740915,
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "messageID=>1234,
     "subject" => "test subject",
     "surrogate" => "test subject",
     "markupHTML" => "&lt;p&gt;test message&lt;/p&gt;",
   },
   "data": {
     "fromAccount": 9068185,
     "subject": "test subject",
     "content": "test message",
     "toGroups": [172682874],
     "node": 11740915,
   }
 }
</pre>
    </td>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/message/create HTTP/1.1
  === header stuff === 

 {
   "data": {
     "fromAccount": 9068185,
     "content": "test response",
     "responseTo": 176966451,
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok": {
     "messageID=>1234,
     "subject" => undef,
     "surrogate" => "test response",
     "markupHTML" => "&lt;p&gt;test response&lt;/p&gt;",
   },
   "data": {
     "fromAccount": 9068185,
     "content": "test response",
     "responseTo": 176966451,
   }
 }
</pre>
    </td>
  </tr>
</table>



<h2>6.9 Subscribe</h2>

<p>Thecrag offers third party apps an account subscription service for app charging. The third party app creates the subscription record. Subscriptions may be associated with a node. Account subscriptions can be queried by the app, which allows a developer to refresh an account or share subscriptions between apps.</p>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/subscribe/create
  http://www.thecrag.com/api/subscribe/create/validate
  http://www.thecrag.com/api/subscribe/update
  http://www.thecrag.com/api/subscribe/update/validate
</pre>

<h3>Creating a subscription</h3>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>account</strong>: accountID - mandatory.</li>
  <li><strong>developer</strong>: developerID - mandatory.</li>
  <li><strong>tag</strong>: optional developer tag for managing subscriptions between a particular developers apps.</li>
  <li><strong>access</strong>: optional access label for managing subscriptions between developers. Currently the only valid non-null setting is 'thecrag' which allows a developer to share the subscriptions as an official thecrag app.</li>
  <li><strong>node</strong>: optional nodeID for associating a subscription with a crag.</li>
  <li><strong>type</strong>: optional subscription type for multiple subscriptions for a particular account.</li>
  <li><strong>expires</strong>: optional expires date (YYYY-MM-DD). A subscription without an expires should be interpreted as a once off payment.</li>
  <li><strong>currency</strong>: optional currency code.</li>
  <li><strong>payment</strong>: optional payment for audit purposes. Should be included if there was a payment associated with the subscription.</li>
  <li><strong>discount</strong>: optional discount if there was a discount associated with the payment.</li>
  <li><strong>trial</strong>: optional flag to indicate a trial subscription.</li>
  <li><strong>complementary</strong>: optional flag to indicate a complementary subscription.</li>
  <li><strong>transactionReference</strong>: optional third party transaction reference.</li>
  <li><strong>notes</strong>: notes associated with the subscription.</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/subscribe/create HTTP/1.1
  === header stuff === 

 {
   "data": {
    "account": 9068185,
    "developer": 156291588,
    "tag": "googleapp",
    "access": "thecrag",
    "node": 11740915,
    "type": "myapp category A",
    "expires": "2012-10-22",
    "currency": "AUD",
    "payment": "4.51",
    "discount": ".49",
    "transactionReference": "AA-THIRD-PARTY-ID",
    "notes": "test the notes functionality"
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok" : {
      "subscriptionID" : 209424667
   },
   "data" : {
      "payment" : "4.51",
      "access" : "thecrag",
      "account" : 9068185,
      "discount" : ".49",
      "node" : 11740915,
      "currency" : "AUD",
      "notes" : "test the notes functionality",
      "developer" : 156291588,
      "tag" : "googleapp",
      "type" : "myapp category A",
      "expires" : "2012-10-22"
      "transactionReference": "AA-THIRD-PARTY-ID",
   }
 }
</pre>
    </td>
  </tr>

</table>

<h3>Updating a subscription</h3>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>account</strong>: accountID - mandatory.</li>
  <li><strong>subscription</strong>: subscriptionID - mandatory.</li>
  <li><strong>transactionReference</strong>: optional third party transaction reference.</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/subscribe/update HTTP/1.1
  === header stuff === 

 {
   "data": {
    "account": 9068185,
    "subscription" : 251188651,
    "transactionReference" : "1234-B",
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok" : {
      "subscriptionID" : 251188651
   },
   "data" : {
      "transactionReference" : "1234-B",
      "account" : 9068185,
      "subscription" : 251188651
   }
 }
</pre>
    </td>
  </tr>

</table>



<h2>6.10 Register Webhook Callbacks</h2>

<p>You may register webhook callbacks. This is where thecrag server tells you about changes to the database. The following webhook samples are currently available for developers:</p>
<pre class="code">
  /climber/1234/profile
  /climber/1234/messages/involved/all
  /climber/1234/ascent
  /climber/1234/ascent/following
  /climber/1234/favorite
  /climber/1234/following
  /climber/1234/followed-by
  /climber/1234/subscription
  /node/6789/update
  /node/6789/descendant/update
</pre>

<p>If you want to use webhook callbacks you must contact us and let us know your url stub, something like 'http://somedeveloper.com/callbacks', in which case the callbacks will be POST'ed to http://somedeveloper.com/callbacks/climber/1234/messages/involved/all' for example.</p>

<p>You register a callback for a context (eg climber 1234, or node 6789) and a known identifer (eg /messages/involved/all). Registering a callback for the context will overwrite the callbacks for the developer/context.</p>

<p>Note that you will only get subscription callbacks for your developerID or if the subscription has a cross developer identifier.</p>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>developer</strong>: developerID - mandatory.</li>
  <li><strong>climber</strong>: accountID - optional (but either climber or node is mandatory).</li>
  <li><strong>node</strong>: nodeID - optional (but either climber or node is mandatory).</li>
  <li><strong>callbacks</strong>: ["/callback/label",...] mandatory, but may be an empty array to reset all callbacks for that developer/entity.</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 POST http://www.thecrag.com/api/subscribe/create HTTP/1.1
  === header stuff === 

 {
   "data": {
    "developer": 156291588,
    "climber": 9068185,
    "callbacks": [
      "/climber/9068185/messages/involved/all",
      "/climber/9068185/following"
    ]
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok" : {},
   "data" : {
      "callbacks" : [
         "/climber/9068185/messages/involved/all",
         "/climber/9068185/following"
      ],
      "developer" : 156291588,
      "climber" : 9068185
   }
 }
</pre>
    </td>
  </tr>

</table>



<h2>6.11 Topo</h2>

<p>You may create topos using thecrag API. Creating topos is a two step process:</p>
<ol>
  <li>Upload the image file into a temporary file on the server.</li>
  <li>Create the topo record, using the name parameter to process the file you just uploaded.</li>
</ol>

<h3>Uploading the image file</h3>

<p>This may be done by using a standard web POST with 'name' and 'file' form parameters to the following end point:</p>
<pre class="code">
  http://www.thecrag.com/upload
</pre>

<p>For example you could use curl to upload the file like following:
<pre class="code">
  curl --form name=some-rand-name --form file=@topo-test-file.jpg http://www.thecrag.com/upload
</pre>

<p><strong>NOTE server limitation</strong>: The uploaded file 'name' must be unique in a temporary directory on the server, so you should put a random hash/number/string in the 'name' parameter when uploading the file, otherwise you may clash with already uploaded files.</p>

<p>The 'name' parameter will be used in the JSON data for creating the actual topo record.</p>

<p>The upload endpoint returns JSON, you should check for error messages. For example if the upload was unsuccessful it may look like:</p>
<pre class="code">
{
  "jsonrpc": "2.0",
  "error" : {
    "code": "101",
    "message": "no upload content"
  },
  "id" : "id"
}
</pre>


<h3>Creating the topo record</h3>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/topo/create
  http://www.thecrag.com/api/topo/create/validate
</pre>

<p>Developers please note you should be uploading topos to the cliff node, and linking to routes as objects. The sourceType should almost always be 'API Client' and source your developer id. The apiUploadFilename should be the same as that which was use in the 'name' parameter for the upload endpoint.</p>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>submittor</strong>: accountID - mandatory.</li>
  <li><strong>node</strong>: nodeID - mandatory node ID of the cliff.</li>
  <li><strong>sourceType</strong>: string - mandatory one of 'Inhouse Photo', 'Uploaded', 'URL', 'API Client'.</li>
  <li><strong>source</strong>: string - mandatory should be the developer ID for API Client.</li>
  <li><strong>apiUploadFilename</strong>: string - mandatory when using sourceType='API Client', and should match the 'name' parameter used in the uploade POST endpoint.</li>
  <li><strong>label</strong>: string - optional string used to label the topo.</li>
  <li><strong>object</strong>: list of objectRefs [{id:routeID,number:topo-object-number,store:points},...].</li>
  <li><strong>publisher</strong>: optional publisherID to be used with beta</li>
  <li><strong>publication</strong>: optional publicationID to be used with beta or citation</li>
</ul>

<h3>Updating the topo record</h3>

<p><strong>Access points</strong>:</p>
<pre class="code">
  http://www.thecrag.com/api/topo/update
  http://www.thecrag.com/api/topo/update/validate
</pre>

<p><strong>Data fields</strong>:</p>
<ul>
  <li><strong>submittor</strong>: accountID - mandatory.</li>
  <li><strong>topo</strong>: topoID - mandatory.</li>
  <li><strong>node</strong>: nodeID - optional, used to change the cliff the topo is associated with.</li>
  <li><strong>overhead</strong>: flag - optional, used to indicate that the topo is an overhead topo.</li>
  <li><strong>name</strong>: string - optional.</li>
  <li><strong>linkObject</strong>: list of objectRefs [{id:routeID,number:topo-object-number},...]. Used to link a topo to a route,area,annotation,topo or anything.</li>
  <li><strong>unlinkObject</strong>: list of objectRefs [{id:routeID},...]. Used to unlink a topo object from the topo (eg the route is no longer needed in the topo).</li>
  <li><strong>object</strong>: list of objectRefs [{id:routeID,store:points},...]. Used to draw topo lines representing the object in the topo.</li>
</ul>

<p><strong>Examples</strong>:</p>
<table>
  <tr>
    <th>POST</th><th>Response</th>
  </tr>

  <tr>
    <td>
<pre class="code">
 curl --form name=some-rand-name --form file=@topo-test-file.jpg http://www.thecrag.com/upload
 POST http://www.thecrag.com/api/topo/create HTTP/1.1
  === header stuff === 

 {
   "data": {
    "submittor": 9068185,
    "node": 11960467,
    "sourceType": "API Client",
    "source": "1111",
    "apiUploadFilename": "some-rand-name",
    "object": [{
      "id": 12859423,
      "store": "9 15,49 55",
    }]
   }
 }
</pre>
    </td>
    <td>
<pre class="code">
 {
   "ok" : {
     "topoID" : "210081091",
   },
   "data" : {
      "source" : "1111",
      "object" : [
         {
            "store" : "9 15,49 55",
            "id" : 12859423
         }
      ],
      "sourceType" : "API Client",
      "apiUploadFilename" : "somerandname",
      "submittor" : 9068185,
      "node" : 11960467
   }
 }
</pre>
    </td>
  </tr>

</table>




<h1 id="s8">8. Mobile app endpoints (UNDER DEVELOPMENT)</h1>

<p>This section is under development to support mobile app clients. The following requires prototyping and documentation:</p>

<ul>
<li>Server availible, heartbeat message
<li>Server announcement (eg 'Server will be unavailable for 2 hours due to an upgrade')
<li>API version supported
<li>Disable app instance (??? maybe this has nothing to do with API)
<li>Force app upgrade (??? maybe this has nothing to do with API)
<li>Force content re-sync for area
<li>Create account and login (inc facebook login, etc)
<li>Get index structure
<li>Get crag details
<li>Callbacks for changed crag info
</ul>

<p>Some of these are partially covered in other parts of this document, but some have not been developed. This section requires significant development, prototyping and testing.




<h2>8.1 Bulk index queries</h2>

<p>Generally speaking an app needs the worldwide structure down to crag level, in a single call. Then from crag to routes in subsequent calls.



<h3>Index structure only</h3>

<p>If you just want index level information then use the following workflow.

<p>1. Get the top level structure (index level information to top level crag):

<p><a href="http://dev.thecrag.com/api/index/summary/world?key=abc">http://dev.thecrag.com/api/index/summary/world</a>

<p>2. For each crag, get the index level information. For example Arapiles:

<p><a href="http://dev.thecrag.com/api/index/summary/11740915?key=abc">http://dev.thecrag.com/api/index/summary/11740915</a>



<h3>Index detail</h3>

<p>1. Get index detail down to top level crag

<p><a href="http://dev.thecrag.com/api/index/detail/world?key=abc&withdata=NodeID,ParentID,LastUpdated,SiblingSequence,NodeType,Name,Point,CountryNodeID,AreaType,NumberAscents,NumberRoutes,NumberTopos,Popularity,TLC,BandProfile,AscentBandProfile,AlternateName,Description,Tag">http://dev.thecrag.com/api/index/detail/world?withdata=NodeID,ParentID,LastUpdated,SiblingSequence,NodeType,Name,Point,CountryNodeID,AreaType,NumberAscents,NumberRoutes,NumberTopos,Popularity,TLC,BandProfile,AscentBandProfile,AlternateName,Description,Tag</a>

<p>Note that you should just query for the information you want to reduce bandwidth and processing time.

<p>2. For each crag, get the index detail. For example Arapiles:

<p><a href="http://dev.thecrag.com/api/index/detail/11740915?key=abc&withdata=NodeID,ParentID,LastUpdated,SiblingSequence,NodeType,Name,Archived,Point,BoundedBox,Fence,CountryNodeID,AreaType,Price,GearStyle,Grade,Stars,NumberAscents,NumberRoutes,NumberTopos,Popularity,TLC,AlternateName,Description,History,Topo,Tag,GradeContribution,RegisteredGrades">http://dev.thecrag.com/api/index/detail/11740915?withdata=NodeID,ParentID,LastUpdated,SiblingSequence,NodeType,Name,Archived,Point,BoundedBox,Fence,CountryNodeID,AreaType,Price,GearStyle,Grade,Stars,NumberAscents,NumberRoutes,NumberTopos,Popularity,TLC,AlternateName,Description,History,Topo,Tag,GradeContribution,RegisteredGrades</a></li>



<h3>Abbreviations</h3>

<p>In order to save bandwidth some fields have been abbreviated. The saving is probably not significant so you can not use abbreviations by setting parameter abbr=0.

<p><strong>Node type</strong>
<ul>
 <li>l: link (not currently in use)
 <li>m: merged (the node has been merged with another node)
 <li>d: deleted (the node has been merged with another node)
 <li>w: root (root node, without a parent - typically this is the worldID, but could be extensible in the future)
 <li>n: annotation (text between routes, the node name can be ignored or used as a sub heading)
 <li>a: area (see area type for further discrimination)
 <li>r: route (route node, these are always leaf nodes)
 <li>p: article (page arcticle - this is proposed, but yet to be implemented node type)
</ul>

<p><strong>Area type</strong>
<ul>
 <li>U: Unknown
 <li>Fi: Field
 <li>Fe: Feature
 <li>G: Gym
 <li>B: Boulder
 <li>S: Sector
 <li>Cl: Cliff
 <li>Cr: Crag
 <li>R: Region
 <li>A: Area
</ul>

<p><strong>Gear style</strong>
<ul>
 <li>U: Unknown
 <li>Tr: Trad
 <li>To: Top rope
 <li>Tr: Traverse
 <li>S: Sport
 <li>D: DWS
 <li>Ai: Aid
 <li>Al: Alpine
 <li>V: Via ferrata
 <li>B: Boulder
 <li>I: Ice
</ul>

<p><strong>Route history type</strong>
<ul>
 <li>fa: First Ascent
 <li>ffa: First Free Ascent
 <li>rs: Route Setter
</ul>

<p><strong>Node name designation</strong>
<ul>
 <li>S: Short
 <li>P: Principle
 <li>O: Offensive
 <li>L: Language
 <li>H: Historical
 <li>A: Alternative
</ul>

<p><strong>Description fields</strong>
<ul>
 <li>Ac: Access
 <li>Ap: Approach
 <li>U: Unique Features And Strengths
 <li>W: Where To Stay
 <li>De: Descent Notes
 <li>E: Ethic
 <li>H: History
 <li>D: Description
</ul>

<h3>Field notes</h3>

<p><strong>Grade</strong>: Returns the grade according to the systems 500 point grades scale. This is an absolute scale that grading systems map to in order to translate the actual difficulty from one grading system to another. All grading systems in theCrag are treated as a range. For translations to specific grading systems see:

<p><a href="https://www.thecrag.com/api/config/grade/system">https://www.thecrag.com/api/config/grade/system</a>

<p>If you want to use the actual grade & grading system assinged to the route then use Grade Contributions.

<p><strong>Stars</strong>: Returns two fields, 0-3 star rating and a 0-100 quality rating for further discimination.

<p><strong>Popularity</strong>: For routes returns one field (0-100 busyness score) and for areas two fields (average busyness score for all routes and max busyness score for any route).

<p><strong>TLC</strong>: Top Level Crag. Pragmatically the index is divided into two levels - firstly everything from world down to top level crag and secondly everything from top level crag to routes. The index is far to big to deal with as a single entity. All queries must take this into account or the system/app is going to have problems. Please note that top level crags change all the time and is technically defined as the first area which is not a region, area or unknown area type. 

<p><strong>Descriptions</strong>: x fields

<p><strong>Topos</strong>: 9 fields
<ul>
  <li>topo ID
  <li>objects to be drawn on topo
  <li>width of the original topo upload
  <li>height of the original topo upload
  <li>hash ID, used to generate the static image lookup
  <li>rotation, used as part of image url generation
  <li>submittor user id
  <li>publisher id - must refer to copyright before using if set
  <li>attribution id - TODO
</ul>

<p>Generating an image url is done as follows: TODO

<p><strong>Grade Contributions</strong>: 7 fields
<ul>
  <li>primary flag (0/1), indicates whether the grade is a primary (ie official system registered grade) or a user contribution.
  <li>publication source, the id of the guidebook / website where the publication came from. Note that you should not use any contributions with this set without getting the copyright terms from the publication source.
  <li>citation, the page number or url where you find the grade cited
  <li>user, the account id of the user who made the contribution.
  <li>grade system
  <li>lower grade
  <li>upper grade (mostly this will be null, but all grades in the system are defined as ranges)
</ul>


<p>Mostly you could just skip the non-primary fields. Also note that star contributions are seen by the system as another rating system so user star contributions are also included here. If you are not interested in all user and publisher contributions then just stick to the registered grades below.

<p><strong>Registered Grades</strong>: 3 fields
<ul>
  <li>grade system
  <li>lower grade
  <li>upper grade (mostly this will be null, but all grades in the system are defined as ranges)
</ul>

<p>Note that there may be multiple registered grades because a grade may have multiple components (eg aid grades '12 M1') or multiple grading systems are registered for that route. 


<h3>Geo location of all areas</h3>

<p>The geolocation of all areas is available in the queries above. However there will be a lot of extra information which is not needed. The following filter will get the geo location of all areas in the world:

<p><a href="http://dev.thecrag.com/api/index/detail/world?key=abc&withdata=">http://dev.thecrag.com/api/index/detail/world?withdata=NodeID,ParentID,LastUpdated,NodeType,Name,Point&to=arealeaf</a>

<p>And this one will get all the geo locations of areas in a Arapiles:

<p><a href="http://dev.thecrag.com/api/index/detail/11740915?key=abc&withdata=">http://dev.thecrag.com/api/index/detail/11740915?withdata=NodeID,ParentID,LastUpdated,NodeType,Name,Point&to=arealeaf</a>


<h3>Incremental update</h3>

<p>The system is set up so that you can get just changed data since your last query. To do that pass in the 'since' parameter using the unix epoch timestamp. You can use the LastUpdated field in a previous call to get this value. For example, incremental update of Arapiles:

<p><a href="http://dev.thecrag.com/api/index/detail/11740915?key=abc&withdata=NodeID,ParentID,LastUpdated,SiblingSequence,NodeType,Name,Point,CountryNodeID,AreaType,Price,GearStyle,Grade,Stars,NumberAscents,NumberRoutes,NumberTopos,Popularity,TLC,AlternateName,Description,History,Topo,Tag,GradeContribution,RegisteredGrades&since=1459146212">http://dev.thecrag.com/api/index/detail/11740915?withdata=NodeID,ParentID,LastUpdated,SiblingSequence,NodeType,Name,Point,CountryNodeID,AreaType,Price,GearStyle,Grade,Stars,NumberAscents,NumberRoutes,NumberTopos,Popularity,TLC,AlternateName,Description,History,Topo,Tag,GradeContribution,RegisteredGrades&since=1459146212</a></li>

<h3>Archived, merged and deleted routes</h3>

Archived, merged and deleted routes will not be returned in baseline mode (ie without the since parameter) but will be returned in delta mode (ie with the since parameter). 

This means an app getting a new crag does not have to worry about archived, merged or deleted routes. However if the app is getting updates then the app should check if a route or area meets one of these conditions and remove it from the local data copy. The archived status is determined by the Archived returned field, which is null or has the archived date. The merged and deleted status is discovered by the NodeType field.
